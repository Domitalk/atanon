{"version":3,"sources":["components/Header.js","components/Post.js","containers/PostContainer.js","components/NewPost.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","theme","createMuiTheme","typography","htmlFontSize","React","useState","anchorEl","setAnchorEl","handleClose","className","position","Button","variant","color","aria-controls","aria-haspopup","onClick","event","currentTarget","ThemeProvider","Typography","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","style","textDecoration","activeStyle","fontWeight","exact","to","useStyles","makeStyles","root","maxWidth","margin","borderRadius","content","padding","title","letterSpacing","textShadow","likes","Post","styles","mediaStyles","useCoverCardMediaStyles","shadowStyles","useBouncyShadowStyles","setChecked","handleClick","number","post","addReaction","post_id","rtype","prev","setTimeout","Card","cx","CardMedia","classes","image","image_url","CardActionArea","CardContent","Box","display","flexDirection","alignItems","justifyContent","minHeight","textAlign","comment","CardActions","value","size","name","heart","smile","sad","angry","flexGrow","spacing","paper","palette","text","secondary","progressRoot","width","marginTop","PostContainer","pageStart","loadMore","fetchMorePosts","hasMore","loader","key","CircularProgress","useWindow","Grid","container","posts","map","item","xs","sm","md","lg","NewPost","setImage_url","setComment","handleChange","target","widget","window","cloudinary","createUploadWidget","cloudName","uploadPreset","error","result","checkUploadResult","resultEvent","errorEvent","console","log","info","secure_url","onSubmit","preventDefault","length","fetch","method","headers","body","JSON","stringify","then","r","json","addPostToFrontOfArray","history","push","type","onChange","App","setPosts","newComment","updatedPost","index","findIndex","slice","useEffect","newPost","path","render","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f5d2ca77.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\n\nfunction Header (props) {\n\n    const theme = createMuiTheme({\n        typography: {\n          // Tell Material-UI what the font-size on the html element is.\n          htmlFontSize: 8,\n        },\n    });\n    // toggle header menu \n    const [anchorEl, setAnchorEl] = React.useState(null);\n    \n    const handleClick = event => {\n        setAnchorEl(event.currentTarget);\n    };\n    \n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <div  className=\"header\" position=\"fixed\"  >\n            <Button variant={'outlined'} color={'primary'} className=\"logo\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick} >\n                <ThemeProvider  theme={theme}>\n                    <Typography>@ANON</Typography>\n                </ThemeProvider>\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n                \n            >\n            <MenuItem onClick={handleClose}><NavLink  \n                style={{\n                    textDecoration: \"non\"\n                }} \n                activeStyle={{\n                    textDecoration: \"none\",\n                    fontWeight: \"bold\",\n                    color: \"black\"\n                }} exact to=\"/atanon/\"> HOME \n            </NavLink></MenuItem>\n            <MenuItem onClick={handleClose}><NavLink \n                style={{\n                    textDecoration: \"non\"\n                }}\n                activeStyle={{\n                    textDecoration: \"none\",\n                    fontWeight: \"bold\",\n                    color: \"black\"\n                }}\n                exact to=\"/atanon/post\"> UPLOAD \n            </NavLink></MenuItem>\n            </Menu>\n        </div>\n    )\n\n}\n\nexport default Header ","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Slide from '@material-ui/core/Slide';\n\nimport cx from 'clsx';\nimport Box from '@material-ui/core/Box';\nimport { useCoverCardMediaStyles } from '@mui-treasury/styles/cardMedia/cover';\n// import { useLightTopShadowStyles } from '@mui-treasury/styles/shadow/lightTop';\nimport { useBouncyShadowStyles } from \"@mui-treasury/styles/shadow/bouncy\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      maxWidth: 304,\n      margin: 'auto',\n      borderRadius: 10,\n      position: 'relative',\n    },\n    content: {\n      padding: 24,\n    },\n    title: {\n      color: '#fff',\n      letterSpacing: '2px',\n      textShadow: \"#260C0C 1px 0 10px\", \n    },\n    likes: {\n        color: '#fff',\n        letterSpacing: '2px',\n        textShadow: \"#260C0C 1px 0 10px\", \n    },\n    \n  }));\n\n\nconst Post = (props) => {\n\n\n    \n    const styles = useStyles();\n    const mediaStyles = useCoverCardMediaStyles();\n    const shadowStyles = useBouncyShadowStyles();\n    const [checked, setChecked] = React.useState(false);\n    const [emotion, setEmotion] = React.useState('')\n\n    const flashAfter = () => {\n        setChecked(prev => !prev);\n        setTimeout(() => { setChecked(prev => !prev) }, 2000)\n    }\n\n    // create a reaction \n    const handleClick = (number) => {\n        // console.log(number)\n        // setEmotion(number)\n\n        switch (number) {\n            case 1:\n                // setEmotion('❤️')\n                // setEmotion(\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-12/256/smiling-face-with-heart-eyes.png\")\n            case 2: \n                // setEmotion('😊')\n                // setEmotion('https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-12/256/smiling-face-with-open-mouth-and-smiling-eyes.png')\n            case 3: \n                // setEmotion('😔')\n                // setEmotion(\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-12/256/crying-face.png\")\n            case 4: \n                // setEmotion('😠')\n                // setEmotion(\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-12/256/angry-face.png\")\n        }\n\n\n        if (props.post.id) {\n            props.addReaction({\n                post_id: props.post.id, \n                rtype: number\n            })\n            flashAfter()\n        }\n    }\n\n    const returnFlash = () => {\n        return (\n            <Slide direction=\"up\" in={checked} mountOnEnter unmountOnExit>\n                <span>{emotion}</span>\n            </Slide> \n        )\n    }\n\n\n    return (\n        <Card variant=\"outlined\"  className={cx(styles.root, shadowStyles.root)}>\n             <CardMedia \n                classes={mediaStyles} \n                image={props.post.image_url}\n            />\n            <CardActionArea>\n                <CardContent className={styles.content} >\n                     \n                    <Box\n                        // onClick={() => { }}\n                        \n                        display={'flex'}\n                        flexDirection={'column'}\n                        alignItems={'center'}\n                        justifyContent={'center'}\n                        minHeight={360}\n                        color={'common.white'}\n                        textAlign={'center'}\n                    >\n                        <h1 className={styles.title}>{props.post.comment}</h1>\n                        {/* {returnFlash()}   */}\n\n                    </Box>\n                </CardContent>\n            </CardActionArea>\n            <CardActions className=\"reactionBox\" >\n                <Button variant={'outlined'} color={'secondary'} className=\"order\" value=\"1\" size=\"small\" name=\"1\" onClick={() => handleClick(1)}>\n                    <span className={styles.likes}>{props.post.heart}</span> ❤️\n                </Button>\n                <Button variant={'outlined'} color={'secondary'} className=\"order\" size=\"small\" name=\"2\" onClick={() => handleClick(2)}>\n                <span className={styles.likes}>{props.post.smile}</span> 😊\n                </Button>\n                <Button variant={'outlined'} color={'secondary'} className=\"order\" size=\"small\" name=\"3\" onClick={() => handleClick(3)}>\n                <span className={styles.likes}>{props.post.sad}</span> 😔\n                </Button>\n                <Button variant={'outlined'} color={'secondary'} className=\"order\" size=\"small\" name=\"4\" onClick={() => handleClick(4)}>\n                <span className={styles.likes}>{props.post.angry}</span> 😠\n                </Button>\n            </CardActions> \n        </Card> \n\n    )\n    \n}\n\nexport default Post ","import React from 'react'\nimport Post from '../components/Post'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport InfiniteScroll from 'react-infinite-scroller';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      flexGrow: 1,\n      spacing: 8,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n    progressRoot: {\n        width: '100%',\n        '& > * + *': {\n          marginTop: theme.spacing(2),\n        },\n      },\n  \n  }));\n\nconst PostContainer = (props) => {\n    const classes = useStyles();\n    // render all the items in posts \n    const mapAllPosts = () => {\n        return props.posts.map((post) => {\n            return (\n                <Grid item xs={12} sm={6} md={4} lg={4}  >\n                    <Post className={classes.paper} key={post.id} post={post} addReaction={props.addReaction}  />\n                </Grid>\n            )\n        })\n    }\n\n    return (\n        <div className={classes.root} className=\"spaced\" >\n            <InfiniteScroll\n                    pageStart={0}\n                    loadMore={props.fetchMorePosts}\n                    hasMore={true || false}\n                    loader={<div className=\"loader\" key={0}> <CircularProgress /></div>}\n                    useWindow={false}\n            >\n                <Grid container spacing={4} >\n                    {mapAllPosts()}\n                </Grid>\n            </InfiniteScroll>\n        </div>\n    )\n\n}\n\nexport default PostContainer \n","import React, { useState, useEffect } from 'react'\nimport Post from '../components/Post'\n\n\n\nconst NewPost = (props) => {\n    // controlled form fields\n    const [image_url, setImage_url] = useState(\"\")\n    const [comment, setComment] = useState(\"\")\n    // object to be sent to front of main state so image shows up immediately\n    let post = {\n        image_url, \n        comment\n    }\n    // controlled form handler\n    const handleChange = (event) => {\n        if (event.target.name === \"image_url\") {\n            setImage_url(event.target.value)\n        } else if (event.target.name === \"comment\") {\n            setComment(event.target.value)\n        }\n    }\n    // fetch to create new post\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        // console.log(event)\n        // for some reason the upload widget is setting off a submit so check for fields\n        if (comment.length > 1 && image_url.length > 1) {\n            fetch('https://atanon-api.herokuapp.com/posts', {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    image_url,\n                    comment\n                })\n            })\n            .then(r => r.json())\n            .then((json) => {\n                setImage_url(\"\")\n                setComment(\"\")\n                // console.log(\"create new post\")\n                // console.log(\"after post json\", json)\n                props.addPostToFrontOfArray(json)\n                // redirect to main page when upload finished\n                props.history.push('/atanon/');\n            })\n        }\n    }\n    // image upload widget\n    let widget = window.cloudinary.createUploadWidget({ \n        cloudName: \"dwazq8zps\", \n        uploadPreset: \"zvziodpl\" }, \n        (error, result) => { \n            // console.log(\"result event\", result)\n            // console.log(\"error event\", error)\n            checkUploadResult(result, error)\n        });\n    // to render the widget \n    const showWidget = () => {\n        widget.open()\n    }\n    // a check on whether the widget uploaded image\n    const checkUploadResult = (resultEvent, errorEvent) => {\n        if (resultEvent.event === 'success') {\n            console.log(\"photo url\", resultEvent.info.secure_url)\n            setImage_url(`${resultEvent.info.secure_url}`)\n        }\n        // use the hook to setImage_url \n    }\n\n    return(\n        <div className=\"spaced\">\n            <br></br>\n            <h2>Preview</h2>\n            <Post post={post} /> \n\n            <form onSubmit={handleSubmit}>\n                <h3>Image URL </h3>\n                <input type=\"url\" name=\"image_url\" value={image_url} onChange={handleChange} />\n                <h3>Or Upload</h3>\n                <button onClick={showWidget}>Upload Your Own Photo</button>\n                <h3>Comment</h3>\n                <textarea name=\"comment\" value={comment} onChange={handleChange} />\n                <br></br>\n                <input type=\"submit\" />\n            </form>\n        </div>\n    )\n\n}\n\nexport default NewPost\n\n","import React, { useState, useEffect } from 'react'\nimport './App.css';\nimport Header from './components/Header'\nimport PostContainer from './containers/PostContainer'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport NewPost from './components/NewPost'\n\n\nfunction App() {\n  // main collection of posts\n  const [posts, setPosts] = useState([])\n  // pass down method in order to create reaction \n  const addReaction = (newComment) => {\n    fetch(`https://atanon-api.herokuapp.com/reactions`, {\n        method: 'POST', \n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newComment)\n    })\n    .then(r => r.json())\n    .then((updatedPost) => {\n        let index = posts.findIndex(post => post.id === updatedPost.id)\n        setPosts([...posts.slice(0, index), updatedPost, ...posts.slice(index + 1)])\n    })\n  }\n  // componentDidMount, fetch of data for initial rendering on homepage\n  useEffect(() => {\n    fetch('https://atanon-api.herokuapp.com/posts')\n    .then(r => r.json())\n    .then((json) => {\n        setPosts(json)\n    })\n  }, [])\n  // infinitescroll fetch more posts, pass down to PostContainer\n  const fetchMorePosts = () => {\n    // console.log(\"fetchmoreposts\")\n    if (posts.length > 0) {\n        setTimeout(() => {\n            fetch(`https://atanon-api.herokuapp.com/posts/${posts[posts.length - 1].id}`)\n            .then(r => r.json())\n            .then((json) => {\n                console.log(json)\n                setPosts([\n                    ...posts,\n                    ...json\n                ])\n            })\n\n        }, 2000)\n    }   \n  }\n  // pass down to NewPost\n  // when creating new post, add to front of collection so it renders first\n  const addPostToFrontOfArray = (newPost) => {\n    setPosts([\n        newPost,\n        ...posts\n    ])\n  }\n\n  return (\n    <Router>\n      <div className=\"App\" >\n        <Header />\n        <Route \n          exact path='/atanon/' \n          render={(props) => {\n            return (\n              <PostContainer {...props} \n                posts={posts} \n                fetchMorePosts={fetchMorePosts}\n                addReaction={addReaction}\n              />\n            )}}\n        />\n        <Route \n          exact path='/atanon/post' \n          render={(props) => {\n            return (\n              <NewPost {...props} \n                addPostToFrontOfArray={addPostToFrontOfArray}\n              /> \n            )\n          }}\n        />\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}